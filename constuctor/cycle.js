const { exec } = require('child_process');
const fs = require('fs');

// Fonction pour g√©n√©rer la suite de Fibonacci
function fibonacci(n) {
  let fib = [0, 1];
  for (let i = 2; i <= n; i++) {
    fib[i] = fib[i - 1] + fib[i - 2];
  }
  return fib;
}

// Fonction pour compiler le fichier SCSS
async function compileSCSS() {
  return new Promise((resolve, reject) => {
    exec('npm run compileSCSS', (error, stdout, stderr) => {
      if (error) {
        console.error(`Erreur de compilation SCSS: ${error.message}`);
        return reject(error);
      }
      if (stderr) {
        console.error(`Erreur de sortie SCSS: ${stderr}`);
      }
      console.log(`Compilation SCSS r√©ussie : ${stdout}`);
      resolve();
    });
  });
}

// Fonction pour g√©rer l'ex√©cution asynchrone des √©tapes du plan de travail
async function executeTask(task, taskIndex, workPlan) {
  console.log(`D√©marrage de la t√¢che: ${task.sequence}`);
  console.log(`Description: ${task.description}`);

  const completedSteps = [];

  for (const step of task.steps) {
    if (!completedSteps.includes(step)) {
      console.log(`Ex√©cution de l'√©tape: ${step}`);
      await executeStep(step);
      completedSteps.push(step);
    }
  }
  console.log(`‚ú® }--------- T√¢che termin√©e: ${task.sequence}`);
  console.log(' ‚ú® -------‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê-------{üî∑}---------‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê------- ‚ú® ');

  saveProgress(taskIndex, workPlan, completedSteps);
}

// Simule l'ex√©cution asynchrone d'une √©tape
async function executeStep(step) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log(`‚ú® }---- √âtape termin√©e: ${step}`);
      resolve();
    }, 1000);
  });
}

// Fonction pour ex√©cuter toutes les t√¢ches dans le plan de travail
async function executeWorkPlan(workPlan) {
  let cycle = 0;
  const fibSeries = fibonacci(15);  // G√©n√©re une s√©rie Fibonacci pour moduler la dur√©e du cycle
  let fibIndex = 0;

  while (true) {
    console.log(`D√©marrage du cycle : ${cycle + 1}`);
    
    for (let i = 0; i < workPlan.tasks.length; i++) {
      await executeTask(workPlan.tasks[i], i, workPlan);
    }

    console.log(`Cycle ${cycle + 1} termin√©.`);

    // Compiler le SCSS apr√®s chaque cycle
    await compileSCSS();

    // Incr√©menter le compteur de cycle
    cycle++;

    // S√©lectionner la dur√©e bas√©e sur Fibonacci pour moduler la pause
    const pauseDuration = fibSeries[fibIndex % fibSeries.length] * 1000;
    fibIndex++;

    console.log(`Pause de ${pauseDuration / 1000} secondes avant de recommencer...`);

    await new Promise(resolve => setTimeout(resolve, pauseDuration));
  }
}

// Fonction pour sauvegarder la progression dans un fichier JSON
function saveProgress(taskIndex, workPlan, completedSteps) {
  const progress = {
    currentTaskIndex: taskIndex,
    completedSteps: completedSteps,
    timestamp: new Date().toISOString(),
    status: workPlan.tasks[taskIndex].status,
    progress: workPlan.tasks[taskIndex].progress
  };

  fs.writeFileSync('progress.json', JSON.stringify(progress, null, 2));
  console.log(`Progression sauvegard√©e: T√¢che ${taskIndex}`);
}

// Structure du plan de travail
const workPlan = 
{
  "tasks": [
    {
      "phase": "Phase 1: Pr√©paration",
      "location": "Open Space",
      "time_start": "2024-10-15T04:00:00",
      "time_end": "2024-10-15T05:00:00",
      "description": "Pr√©paration de l'environnement de travail, synchronisation des fichiers et outils n√©cessaires.",
      "steps": [
        "Organiser les fichiers de projet (Electron, GPT-Wallet, CVUN, Match in Learning).",
        "V√©rifier les d√©pendances des projets via Makefile.",
        "Configurer et tester les scripts de build dans workflow.js.",
        "Pr√©parer await.json pour la gestion asynchrone des t√¢ches.",
        "V√©rifier les scripts de d√©ploiement sur le serveur priv√©.",
        "Pr√©parer les modules vid√©o pour les r√©seaux sociaux (ShortVideoValue)."
      ],
      "status": "Termin√©",
      "progress": "100%"
    },
    {
      "phase": "Phase 2: Travaux sur GPT-Wallet",
      "location": "Open Space",
      "time_start": "2024-10-15T05:00:00",
      "time_end": "2024-10-15T07:00:00",
      "description": "D√©veloppement et optimisation du projet GPT-Wallet pour mon√©tiser les comp√©tences via des Smart Contracts.",
      "steps": [
        "Finaliser les Smart Contracts (umcTokens.sol).",
        "Int√©grer les transactions Pi Coins pour la mon√©tisation des comp√©tences.",
        "Am√©liorer les interactions utilisateur avec l'assistant AI (@MandatoryAi_bot).",
        "R√©diger la documentation pour les utilisateurs du GPT-Wallet."
      ],
      "status": "En cours",
      "progress": "10%"
    },
    {
      "phase": "Phase 3: Pr√©sentation du projet √† l'universit√©",
      "location": "Universit√©",
      "time_start": "2024-10-15T07:00:00",
      "time_end": "2024-10-15T09:00:00",
      "description": "Pr√©sentation du projet et collecte de donn√©es √† l'universit√©.",
      "steps": [
        "Pr√©parer et pr√©senter le questionnaire sur la r√©forme du Code du Travail.",
        "Discuter avec des citoyens et universitaires pour obtenir des retours.",
        "Recueillir des donn√©es sur la valeur travail et le curriculum num√©rique.",
        "Pr√©senter la solution d'allocation universelle mensuelle bas√©e sur le CVUN."
      ],
      "status": "En cours",
      "progress": "0%"
    },
    {
      "phase": "Phase 4: Pause",
      "location": "Open Space",
      "time_start": "2024-10-15T09:00:00",
      "time_end": "2024-10-15T09:30:00",
      "description": "Pause pour se d√©tendre et r√©initialiser l'esprit.",
      "steps": [
        "Bilan de la phase pr√©c√©dente.",
        "Analyse des travaux r√©alis√©s.",
        "Planification des prochaines √©tapes."
      ],
      "status": "Termin√©",
      "progress": "100%"
    },
    {
      "phase": "Phase 5: R√©colte d'id√©es √† l'Open Space",
      "location": "Open Space",
      "time_start": "2024-10-15T09:30:00",
      "time_end": "2024-10-15T11:30:00",
      "description": "R√©colte d'id√©es et ressources pour le projet.",
      "steps": [
        "Discussion avec des professionnels et utilisateurs sur les m√©thodes de d√©veloppement.",
        "Recueillir des suggestions pour am√©liorer le projet.",
        "D√©velopper des m√©thodes et donn√©es pour l'optimisation du projet."
      ],
      "status": "En cours",
      "progress": "50%"
    },
    {
      "phase": "Phase 6: Tribunal pour l'aide juridictionnelle",
      "location": "Tribunal",
      "time_start": "2024-10-15T11:30:00",
      "time_end": "2024-10-15T12:30:00",
      "description": "Se rendre au tribunal civil pour obtenir l'aide juridictionnelle.",
      "steps": [
        "Obtenir des informations sur les proc√©dures pour obtenir l'aide juridictionnelle.",
        "R√©diger les courriers n√©cessaires pour pr√©senter le cas.",
        "Discuter de la d√©fense face √† la r√©pression financi√®re."
      ],
      "status": "En cours",
      "progress": "40%"
    },
    {
      "phase": "Phase 7: Documentation et finalisation",
      "location": "Open Space",
      "time_start": "2024-10-15T12:30:00",
      "time_end": "2024-10-15T13:30:00",
      "description": "Finalisation de la documentation technique et utilisateur pour les projets.",
      "steps": [
        "R√©diger la documentation utilisateur pour GPT-Wallet et CVUN.",
        "Documenter les parcours d'apprentissage dans Match in Learning.",
        "Finaliser la documentation sur l'int√©gration des assistants IA dans les projets."
      ],
      "status": "En cours",
      "progress": "60%"
    },
    {
      "phase": "Phase 8: R√©capitulatif et planification des √©tapes suivantes",
      "location": "Open Space",
      "time_start": "2024-10-15T13:30:00",
      "time_end": "2024-10-15T14:00:00",
      "description": "Bilan des t√¢ches accomplies et planification des prochaines √©tapes.",
      "steps": [
        "Revoir les objectifs atteints pendant la journ√©e.",
        "Planifier les √©tapes suivantes pour chaque projet (CVUN, GPT-Wallet, Match in Learning).",
        "Pr√©parer le calendrier pour les prochains d√©veloppements."
      ],
      "status": "En cours",
      "progress": "10%"
    }
  ]
};
  

// Ex√©cution infinie du plan de travail avec pause Fibonacci
executeWorkPlan(workPlan);
